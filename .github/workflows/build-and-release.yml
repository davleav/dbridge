name: Build and Release AppImage

on:
  push:
    tags:
      - 'v*'  # Run workflow on version tags, e.g. v0.8.1
  workflow_dispatch:  # Allow manual triggering

# Add permissions needed for creating releases
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install PyQt6 SQLAlchemy pymysql psycopg2-binary pandas matplotlib pyinstaller
          fi
          
      - name: Extract version from tag
        id: get_version
        run: |
          echo "GITHUB_REF is: $GITHUB_REF"
          echo "GITHUB_SHA is: $GITHUB_SHA"
          
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "This is a tag-based build"
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            echo "This is a manual or branch-based build"
            VERSION="dev-$(date +'%Y%m%d')"
          fi
          
          echo "Setting VERSION to: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Verify the environment variable was set
          echo "Verifying VERSION environment variable: $VERSION"
          
      - name: Build AppImage
        run: |
          # Clean up any previous build artifacts
          rm -rf venv AppDir dist build *.AppImage resources/icon.png
          mkdir -p resources
          
          # Copy the icon
          cp DBridge.png resources/icon.png
          
          # Install Qt and other dependencies
          echo "Installing dependencies..."
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-dev python3-venv python3-setuptools python3-wheel
          sudo apt-get install -y libgl1 libegl1 libxkbcommon-x11-0 
          sudo apt-get install -y libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 
          sudo apt-get install -y libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0 libxcb-cursor0
          sudo apt-get install -y desktop-file-utils libglib2.0-bin patchelf
          
          # Install Qt packages to get platform plugins
          sudo apt-get install -y qt5-default qtbase5-dev libqt5gui5 libqt5widgets5 libqt5core5a || true
          sudo apt-get install -y qt6-base-dev libqt6gui6 libqt6widgets6 libqt6core6 || true
          
          # Use PyInstaller to bundle the application
          echo "Looking for main.py..."
          find . -name "main.py" | sort
          
          if [ -f src/main.py ]; then
            echo "Found src/main.py, using it for PyInstaller"
            pyinstaller --onedir --name dbridge src/main.py
          else
            echo "src/main.py not found, searching for alternatives..."
            MAIN_PY=$(find . -name "main.py" | head -1)
            if [ -n "$MAIN_PY" ]; then
              echo "Found alternative main.py at: $MAIN_PY"
              pyinstaller --onedir --name dbridge "$MAIN_PY"
            else
              echo "Error: No main.py found. Cannot continue."
              echo "Current directory structure:"
              find . -type f -name "*.py" | sort
              exit 1
            fi
          fi
          
          # Verify PyInstaller output
          echo "Checking PyInstaller output:"
          if [ -d "dist/dbridge" ]; then
            echo "PyInstaller output exists at dist/dbridge"
            ls -la dist/dbridge
          else
            echo "ERROR: PyInstaller output not found!"
            echo "Contents of dist directory (if it exists):"
            ls -la dist || echo "dist directory does not exist"
            exit 1
          fi
          
          # Install FUSE
          echo "Installing FUSE..."
          sudo apt-get install -y libfuse2
          
          # Create desktop file
          mkdir -p dist/dbridge/usr/share/applications
          cat > dist/dbridge/dbridge.desktop << EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=DBridge
          Comment=A user-friendly SQL client (v${VERSION})
          Exec=dbridge
          Icon=dbridge
          Categories=Development;Database;
          Terminal=false
          StartupNotify=true
          EOF
          
          # Copy icon
          mkdir -p dist/dbridge/usr/share/icons/hicolor/256x256/apps
          cp DBridge.png dist/dbridge/dbridge.png
          
          # Create AppDir structure
          echo "Creating AppDir structure..."
          
          # Set up environment variables
          export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
          
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/lib
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy PyInstaller output to AppDir
          cp -r dist/dbridge/* AppDir/
          
          # Copy Python executable to AppDir
          echo "Copying Python executable to AppDir..."
          PYTHON_PATH=$(which python3 || which python)
          if [ -n "$PYTHON_PATH" ]; then
            echo "Found Python at: $PYTHON_PATH"
            mkdir -p AppDir/usr/bin
            cp -v "$PYTHON_PATH" AppDir/usr/bin/python3
            ln -sf python3 AppDir/usr/bin/python
            
            # Copy Python standard library
            PYTHON_LIB_PATH=$(python3 -c "import sys; print(sys.path[-1])" 2>/dev/null)
            if [ -n "$PYTHON_LIB_PATH" ] && [ -d "$PYTHON_LIB_PATH" ]; then
              echo "Copying Python standard library from: $PYTHON_LIB_PATH"
              mkdir -p AppDir/usr/lib/python3.10
              cp -rv "$PYTHON_LIB_PATH"/* AppDir/usr/lib/python3.10/ || true
            fi
          else
            echo "WARNING: Python executable not found!"
          fi
          
          # Copy desktop file and icon
          cp dist/dbridge/dbridge.desktop AppDir/usr/share/applications/
          cp DBridge.png AppDir/usr/share/icons/hicolor/256x256/apps/dbridge.png
          cp DBridge.png AppDir/dbridge.png
          
          # Create launcher script with comprehensive Qt environment variables
          cat > AppDir/usr/bin/dbridge << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          APPDIR=$(dirname $(dirname "$HERE"))
          
          # Python paths
          export PYTHONPATH="${APPDIR}/usr/lib/python3.10/site-packages:${PYTHONPATH}"
          
          # Library paths
          export LD_LIBRARY_PATH="${APPDIR}/usr/lib:${LD_LIBRARY_PATH}"
          
          # Qt paths - try both PyQt6 location and standard location
          export QT_PLUGIN_PATH="${APPDIR}/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins:${APPDIR}/usr/plugins:${QT_PLUGIN_PATH}"
          export QT_QPA_PLATFORM_PLUGIN_PATH="${APPDIR}/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/platforms:${APPDIR}/usr/plugins/platforms:${QT_QPA_PLATFORM_PLUGIN_PATH}"
          
          # Additional Qt environment variables
          export QT_DEBUG_PLUGINS=1
          export QT_XCB_GL_INTEGRATION=xcb_glx
          export XDG_DATA_DIRS="${APPDIR}/usr/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
          
          # Change to the Python package directory and run the main module
          cd "${APPDIR}/usr/lib/python3.10/site-packages"
          # Use absolute path to Python if available, otherwise try to find it
          if [ -f "${APPDIR}/usr/bin/python3" ]; then
            "${APPDIR}/usr/bin/python3" -m src.main
          elif [ -f "${APPDIR}/usr/bin/python" ]; then
            "${APPDIR}/usr/bin/python" -m src.main
          else
            # Try to find Python in PATH
            PYTHON_PATH=$(which python3 2>/dev/null || which python 2>/dev/null)
            if [ -n "$PYTHON_PATH" ]; then
              "$PYTHON_PATH" -m src.main
            else
              echo "Error: Python executable not found"
              exit 1
            fi
          fi
          EOF
          chmod +x AppDir/usr/bin/dbridge
          
          # Also create a comprehensive AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          
          # Python paths
          export PYTHONPATH="${HERE}/usr/lib/python3.10/site-packages:${PYTHONPATH}"
          
          # Library paths
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          
          # Qt paths - try both PyQt6 location and standard location
          export QT_PLUGIN_PATH="${HERE}/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins:${HERE}/usr/plugins:${QT_PLUGIN_PATH}"
          export QT_QPA_PLATFORM_PLUGIN_PATH="${HERE}/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/platforms:${HERE}/usr/plugins/platforms:${QT_QPA_PLATFORM_PLUGIN_PATH}"
          
          # Additional Qt environment variables
          export QT_DEBUG_PLUGINS=1
          export QT_XCB_GL_INTEGRATION=xcb_glx
          export XDG_DATA_DIRS="${HERE}/usr/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
          
          # Execute the application with proper Python path
          if [ -f "${HERE}/usr/bin/python3" ]; then
            export PYTHON="${HERE}/usr/bin/python3"
          elif [ -f "${HERE}/usr/bin/python" ]; then
            export PYTHON="${HERE}/usr/bin/python"
          else
            # Try to find Python in PATH
            PYTHON_PATH=$(which python3 2>/dev/null || which python 2>/dev/null)
            if [ -n "$PYTHON_PATH" ]; then
              export PYTHON="$PYTHON_PATH"
            else
              echo "Error: Python executable not found"
              exit 1
            fi
          fi
          
          # Execute the application
          exec "${HERE}/usr/bin/dbridge" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Copy Qt libraries and plugins
          echo "Copying Qt libraries and plugins..."
          
          # Create directories for Qt plugins
          mkdir -p AppDir/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/platforms
          mkdir -p AppDir/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/xcbglintegrations
          mkdir -p AppDir/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/imageformats
          mkdir -p AppDir/usr/plugins/platforms
          
          # Copy XCB and X11 libraries
          echo "Copying XCB and X11 libraries..."
          cp -v /usr/lib/x86_64-linux-gnu/libxcb*.so* AppDir/usr/lib/ || true
          cp -v /usr/lib/x86_64-linux-gnu/libX*.so* AppDir/usr/lib/ || true
          cp -v /usr/lib/x86_64-linux-gnu/libxkbcommon*.so* AppDir/usr/lib/ || true
          
          # Copy Qt libraries
          echo "Copying Qt libraries..."
          cp -v /usr/lib/x86_64-linux-gnu/libQt*.so* AppDir/usr/lib/ || true
          
          # Find and copy Qt platform plugins (both Qt5 and Qt6)
          echo "Finding Qt platform plugins..."
          
          # For Qt5
          QT5_PLUGIN_PATH=$(find /usr -path "*/qt5/plugins/platforms/libqxcb.so" 2>/dev/null || echo "")
          if [ -n "$QT5_PLUGIN_PATH" ]; then
            echo "Found Qt5 XCB plugin at: $QT5_PLUGIN_PATH"
            QT5_PLUGIN_DIR=$(dirname "$QT5_PLUGIN_PATH")
            QT5_ROOT=$(dirname "$(dirname "$QT5_PLUGIN_DIR")")
            echo "Copying Qt5 platform plugins..."
            cp -rv "$QT5_PLUGIN_DIR"/* AppDir/usr/plugins/platforms/ || true
            cp -rv "$QT5_ROOT"/xcbglintegrations/* AppDir/usr/plugins/xcbglintegrations/ || true
            cp -rv "$QT5_ROOT"/imageformats/* AppDir/usr/plugins/imageformats/ || true
          fi
          
          # For Qt6
          QT6_PLUGIN_PATH=$(find /usr -path "*/qt6/plugins/platforms/libqxcb.so" 2>/dev/null || echo "")
          if [ -n "$QT6_PLUGIN_PATH" ]; then
            echo "Found Qt6 XCB plugin at: $QT6_PLUGIN_PATH"
            QT6_PLUGIN_DIR=$(dirname "$QT6_PLUGIN_PATH")
            QT6_ROOT=$(dirname "$(dirname "$QT6_PLUGIN_DIR")")
            echo "Copying Qt6 platform plugins..."
            cp -rv "$QT6_PLUGIN_DIR"/* AppDir/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/platforms/ || true
            cp -rv "$QT6_ROOT"/xcbglintegrations/* AppDir/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/xcbglintegrations/ || true
            cp -rv "$QT6_ROOT"/imageformats/* AppDir/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/imageformats/ || true
          fi
          
          # If we couldn't find the plugins, try to find them in PyQt6 installation
          if [ ! -f "AppDir/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/platforms/libqxcb.so" ] && [ ! -f "AppDir/usr/plugins/platforms/libqxcb.so" ]; then
            echo "Looking for plugins in PyQt6 installation..."
            PYQT6_PATH=$(python -c "import PyQt6; print(PyQt6.__path__[0])" 2>/dev/null || echo "")
            if [ -n "$PYQT6_PATH" ]; then
              echo "Found PyQt6 at: $PYQT6_PATH"
              if [ -d "$PYQT6_PATH/Qt6/plugins" ]; then
                echo "Copying PyQt6 plugins..."
                cp -rv "$PYQT6_PATH"/Qt6/plugins/* AppDir/usr/lib/python3.10/site-packages/PyQt6/Qt6/plugins/ || true
              fi
            fi
          fi
          
          # Skip linuxdeploy and use appimagetool directly
          echo "Using appimagetool directly..."
          wget -c "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool-x86_64.AppImage
          
          # Extract appimagetool to avoid FUSE issues
          ./appimagetool-x86_64.AppImage --appimage-extract
          chmod -R +x squashfs-root/
          
          # Set AppImage filename
          APPIMAGE_FILENAME="DBridge-${VERSION}-x86_64.AppImage"
          echo "AppImage filename will be: $APPIMAGE_FILENAME"
          
          # Run appimagetool
          ARCH=x86_64 ./squashfs-root/AppRun AppDir "$APPIMAGE_FILENAME"
          
          # Check if AppImage was created by linuxdeploy or appimagetool
          APPIMAGE_FILENAME="DBridge-${VERSION}-x86_64.AppImage"
          
          # Look for any AppImage files if the expected one doesn't exist
          if [ ! -f "$APPIMAGE_FILENAME" ]; then
            echo "Looking for any AppImage files..."
            FOUND_APPIMAGE=$(find . -name "*.AppImage" -not -name "appimagetool-*.AppImage" -not -name "linuxdeploy-*.AppImage" | head -1)
            if [ -n "$FOUND_APPIMAGE" ]; then
              echo "Found AppImage: $FOUND_APPIMAGE"
              cp "$FOUND_APPIMAGE" "$APPIMAGE_FILENAME"
            fi
          fi
          
          if [ -f "$APPIMAGE_FILENAME" ]; then
            echo "AppImage created successfully: $APPIMAGE_FILENAME"
            # Ensure the AppImage is executable
            chmod +x "$APPIMAGE_FILENAME"
            # List directory contents to verify
            ls -la
            
            # Check file type and size
            echo "AppImage file type: $(file "$APPIMAGE_FILENAME")"
            echo "AppImage file size: $(du -h "$APPIMAGE_FILENAME" | cut -f1)"
            
            # Try to run the AppImage with --appimage-offset to verify it's valid
            echo "Attempting to verify AppImage validity..."
            if ./"$APPIMAGE_FILENAME" --appimage-offset > /dev/null 2>&1; then
              echo "AppImage appears to be valid (has AppImage offset)"
            else
              echo "WARNING: AppImage may not be valid (no AppImage offset found)"
              # Don't exit with error yet, we'll still try to upload it
            fi
          else
            echo "ERROR: AppImage was not created!"
            echo "Current directory contents:"
            ls -la
            echo "Looking for any AppImage files:"
            find . -name "*.AppImage" | xargs ls -la
            exit 1
          fi
          
      # Save the AppImage filename as an output
      - name: Set AppImage filename as output
        id: appimage_filename
        run: |
          echo "Current VERSION is: $VERSION"
          APPIMAGE_FILENAME="DBridge-${VERSION}-x86_64.AppImage"
          echo "APPIMAGE_FILENAME=$APPIMAGE_FILENAME" >> $GITHUB_ENV
          echo "filename=$APPIMAGE_FILENAME" >> $GITHUB_OUTPUT
          echo "AppImage filename: $APPIMAGE_FILENAME"
          
          # List all files in the current directory
          echo "All files in current directory:"
          ls -la
          
          # Check for any AppImage files
          echo "Looking for any AppImage files:"
          find . -name "*.AppImage" -type f
          
          # Verify file exists again
          if [ -f "$APPIMAGE_FILENAME" ]; then
            echo "File exists and will be uploaded"
            ls -la "$APPIMAGE_FILENAME"
            echo "File size: $(du -h "$APPIMAGE_FILENAME" | cut -f1)"
            echo "File type: $(file "$APPIMAGE_FILENAME")"
          else
            echo "ERROR: Expected AppImage file does not exist!"
            echo "Looking for any files that might be the AppImage with a different name:"
            find . -type f -size +1M | xargs ls -lh
            exit 1
          fi

      - name: Upload AppImage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: ${{ env.APPIMAGE_FILENAME }}

      - name: Debug Release Info
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "startsWith check: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "VERSION: ${{ env.VERSION }}"
          echo "APPIMAGE_FILENAME: ${{ env.APPIMAGE_FILENAME }}"
          echo "File exists check: $([ -f "${{ env.APPIMAGE_FILENAME }}" ] && echo 'Yes' || echo 'No')"

      - name: Create Release (Tag-based)
        id: create_release_tag
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.APPIMAGE_FILENAME }}
          name: DBridge v${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
      # For manual triggers, create a tag first, then create a release
      - name: Create Tag for Manual Trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          TAG_NAME="dev-${{ github.run_number }}"
          echo "Creating tag $TAG_NAME"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a $TAG_NAME -m "Development build ${{ github.run_number }}"
          git push origin $TAG_NAME
          echo "DEV_TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Prepare Release Files
        run: |
          echo "Preparing files for release..."
          echo "APPIMAGE_FILENAME: ${{ env.APPIMAGE_FILENAME }}"
          
          # Check if AppImage exists
          if [ -f "${{ env.APPIMAGE_FILENAME }}" ]; then
            echo "AppImage file found: ${{ env.APPIMAGE_FILENAME }}"
            echo "File size: $(du -h "${{ env.APPIMAGE_FILENAME }}" | cut -f1)"
            echo "File type: $(file "${{ env.APPIMAGE_FILENAME }}")"
            
            # Make sure it's executable
            chmod +x "${{ env.APPIMAGE_FILENAME }}"
          else
            echo "WARNING: AppImage file not found!"
            echo "Looking for any AppImage files:"
            find . -name "*.AppImage" -type f
            
            # If any AppImage is found, use the first one
            FOUND_APPIMAGE=$(find . -name "*.AppImage" -type f | head -1)
            if [ -n "$FOUND_APPIMAGE" ]; then
              echo "Found alternative AppImage: $FOUND_APPIMAGE"
              echo "APPIMAGE_FILENAME=$FOUND_APPIMAGE" >> $GITHUB_ENV
              chmod +x "$FOUND_APPIMAGE"
            else
              echo "ERROR: No AppImage files found!"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
          fi

      - name: Create Release (Manual Trigger)
        id: create_release_manual
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.APPIMAGE_FILENAME }}
          name: DBridge v${{ env.VERSION }} (Development Build)
          tag_name: ${{ env.DEV_TAG_NAME }}
          draft: true
          prerelease: true
          generate_release_notes: false
          body: |
            # Development Build
            
            This is a development build created from the ${{ github.ref_name }} branch.
            Build number: ${{ github.run_number }}
            Commit: ${{ github.sha }}
            
            This release is automatically generated from a manual workflow trigger.