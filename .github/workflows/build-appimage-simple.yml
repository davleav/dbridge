name: Build AppImage (Simple)

on:
  push:
    tags:
      - 'v*'  # Run workflow on version tags, e.g. v0.8.1
  workflow_dispatch:  # Allow manual triggering

# Add permissions needed for creating releases
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install PyQt6 SQLAlchemy pymysql psycopg2-binary pandas matplotlib pyinstaller
          fi
          
      - name: Extract version from tag
        id: get_version
        run: |
          echo "GITHUB_REF is: $GITHUB_REF"
          echo "GITHUB_SHA is: $GITHUB_SHA"
          
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "This is a tag-based build"
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            echo "This is a manual or branch-based build"
            VERSION="dev-$(date +'%Y%m%d')"
          fi
          
          echo "Setting VERSION to: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-dev python3-venv python3-setuptools python3-wheel
          sudo apt-get install -y libgl1 libegl1 libxkbcommon-x11-0 
          sudo apt-get install -y libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 
          sudo apt-get install -y libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0 libxcb-cursor0
          sudo apt-get install -y desktop-file-utils libglib2.0-bin patchelf libfuse2
          
      - name: Modify build_appimage_simple.sh for GitHub Actions
        run: |
          # Create a modified version of the script for GitHub Actions
          cp build_appimage_simple.sh build_appimage_github.sh
          
          # Update the version in the script to use the GitHub Actions version
          sed -i "s/VERSION=\"0.8.0\"/VERSION=\"$VERSION\"/" build_appimage_github.sh
          
          # Remove interactive prompt for root user
          sed -i '/if \[ "\$(id -u)" -eq 0 \]; then/,/fi/c\# Running in GitHub Actions environment' build_appimage_github.sh
          
          # Update the build directory to use a separate directory outside the workspace
          sed -i "s|BUILD_DIR=\"\$HOME/dbridge_build_tmp\"|BUILD_DIR=\"/tmp/dbridge_build_tmp\"|" build_appimage_github.sh
          
          # Modify the copy command to exclude the build directory
          sed -i 's|cp -r "$SCRIPT_DIR"/\* "$BUILD_DIR/"|mkdir -p "$BUILD_DIR" \&\& find "$SCRIPT_DIR" -maxdepth 1 -not -path "$BUILD_DIR" -not -path "$SCRIPT_DIR" -exec cp -r {} "$BUILD_DIR/" \\;|' build_appimage_github.sh
          
          # Remove the cleanup prompt at the end of the script and automatically clean up
          sed -i '/# Ask if the user wants to clean up the temporary directory/,/fi/c\# Automatically clean up in GitHub Actions\necho "Automatically cleaning up build directory..."\ncd "$SCRIPT_DIR"\nrm -rf "$BUILD_DIR"' build_appimage_github.sh
          
          # Make the script executable
          chmod +x build_appimage_github.sh
          
          # Show the modified script
          echo "Modified script for GitHub Actions:"
          cat build_appimage_github.sh
          
      - name: Build AppImage using modified script
        run: |
          # Run the modified script
          ./build_appimage_github.sh
          
          # Set the AppImage filename for later steps
          APPIMAGE_FILENAME="DBridge-Beta-${VERSION}-x86_64.AppImage"
          echo "APPIMAGE_FILENAME=$APPIMAGE_FILENAME" >> $GITHUB_ENV
          
          # Verify the AppImage was created
          if [ -f "$APPIMAGE_FILENAME" ]; then
            echo "AppImage created successfully: $APPIMAGE_FILENAME"
            ls -la "$APPIMAGE_FILENAME"
            echo "File size: $(du -h "$APPIMAGE_FILENAME" | cut -f1)"
            echo "File type: $(file "$APPIMAGE_FILENAME")"
          else
            echo "Looking for AppImage in other locations..."
            
            # Check in the build directory
            if [ -f "/tmp/dbridge_build_tmp/$APPIMAGE_FILENAME" ]; then
              echo "Found AppImage in build directory"
              cp "/tmp/dbridge_build_tmp/$APPIMAGE_FILENAME" .
            fi
            
            # Check in home directory (where the script copies it)
            if [ -f ~/"$APPIMAGE_FILENAME" ]; then
              echo "Found AppImage in home directory"
              cp ~/"$APPIMAGE_FILENAME" .
            fi
            
            # Search for any AppImage files
            echo "Searching for any AppImage files..."
            find /tmp/dbridge_build_tmp -name "*.AppImage" -not -name "appimagetool-*.AppImage" || true
            find ~ -maxdepth 1 -name "*.AppImage" -not -name "appimagetool-*.AppImage" || true
            find . -name "*.AppImage" -not -name "appimagetool-*.AppImage" || true
            
            # Try to find any AppImage and use it
            FOUND_APPIMAGE=$(find /tmp/dbridge_build_tmp -name "*.AppImage" -not -name "appimagetool-*.AppImage" | head -1)
            if [ -n "$FOUND_APPIMAGE" ]; then
              echo "Found AppImage at: $FOUND_APPIMAGE"
              cp "$FOUND_APPIMAGE" "$APPIMAGE_FILENAME"
            fi
            
            # Check again after searching
            if [ -f "$APPIMAGE_FILENAME" ]; then
              echo "AppImage found and ready for upload"
              ls -la "$APPIMAGE_FILENAME"
              echo "File size: $(du -h "$APPIMAGE_FILENAME" | cut -f1)"
              echo "File type: $(file "$APPIMAGE_FILENAME")"
            else
              echo "ERROR: AppImage was not created!"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
          fi
          
      - name: Upload AppImage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: ${{ env.APPIMAGE_FILENAME }}
          
      - name: Create Release (Tag-based)
        id: create_release_tag
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.APPIMAGE_FILENAME }}
          name: DBridge v${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
      # For manual triggers, create a development release
      - name: Create Development Release (Manual Trigger)
        id: create_dev_release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.APPIMAGE_FILENAME }}
          name: DBridge Development Build v${{ env.VERSION }}
          tag_name: dev-${{ github.run_number }}
          draft: false
          prerelease: true
          generate_release_notes: false
          body: |
            Development build created from branch ${{ github.ref_name }} at commit ${{ github.sha }}.
            This is an automated build triggered manually.